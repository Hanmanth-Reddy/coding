1) Browser send a request to server 

2) Server Authentication (SSL/TLS Handshake):
  a) Server responde with the certificate is issued by a trusted CA and contains the server's public key.
  b) The browser performs several checks on the server's certificate to ensure the server's identity and the integrity of the certificate:
      It verifies whether the certificate is issued by a trusted CA.
      It checks if the certificate has expired or is still valid.
  c) The browser generates a pre-master secret and encrypts it with the server's public key and send back to encrypted pre-master secret the server.

3) Key Exchange and Session Key Generation:
   a) The server decrypts the pre-master secret using its private key.
   b) Both the browser & the server independently generate a session key based on the pre-master secret.
	  This session key will be used to encrypt and decrypt data during the secure communication session.
	  
4) Secure Data Exchange:
With the session key now established, the browser and server can exchange data securely using symmetric encryption. 
   
5) Data Integrity and Authentication:
  a) To ensure the integrity of the data, a Message Authentication Code (MAC) is often used. This code is generated using a shared secret key (session key) and is sent along with the encrypted data.
  b) The browser can verify the integrity of the received data by checking the MAC.

6) Data Decryption and Display:
  a) The browser uses the session key to decrypt the received data, making it readable and usable.

7) Renewal and Reauthentication:
  a) The SSL/TLS session has a limited lifetime. To maintain security, the browser and server periodically renegotiate the session, generating new encryption keys.
